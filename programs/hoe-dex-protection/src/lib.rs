use anchor_lang::prelude::*;
use anchor_spl::token::{self, Mint, Token, TokenAccount, Transfer};
use std::collections::HashSet;

// Program ID (replace with actual ID after deployment)
// FIX: Replace this with the actual program ID generated by `anchor build`
declare_id!("hoedexprotect1111111111111111111111111111111111111");

// Constants for fee and protection limits
const MAX_EARLY_TRADE_FEE_BPS: u64 = 1000; // 10% maximum early trade fee
const MAX_TIER_FEE_BPS: u64 = 1000; // 10% maximum tier-based fee
const MAX_TRADE_SIZE_BPS: u64 = 1000; // 10% of pool size
const MAX_PRICE_IMPACT_BPS: u64 = 1000; // 10% maximum price impact
const MAX_COOLDOWN_SECONDS: u64 = 3600; // 1 hour maximum cooldown
const MIN_CIRCUIT_BREAKER_COOLDOWN: u64 = 60; // 1 minute minimum cooldown
const MAX_BLACKLIST_SIZE: usize = 100; // Maximum number of blacklisted traders
const MAX_FEE_TIERS: usize = 10; // Maximum number of fee tiers
const MINIMUM_FEE: u64 = 1; // Minimum fee in token units
const MAX_TOKEN_DECIMALS: u8 = 9; // Maximum token decimals supported
const MIN_FEE_TIER_SPACING_BPS: u64 = 100; // 1% of max_daily_volume minimum spacing
const EMERGENCY_TIMELOCK_SECONDS: u64 = 3600; // 1 hour emergency action delay
const ADMIN_UPDATE_COOLDOWN: u64 = 86400; // 24 hours between admin updates
const BATCH_BLACKLIST_MAX_SIZE: usize = 50; // Maximum traders per batch blacklist

// Fee mode constants for tracking fee application
const FEE_MODE_NONE: u8 = 0; // No fee applied
const FEE_MODE_EARLY_TRADE: u8 = 1; // Early trade fee applied
const FEE_MODE_TIER_BASED: u8 = 2; // Volume-based tier fee applied

#[program]
pub mod hoe_dex_protection {
    use super::*;

    /// Initialize a new pool with protection parameters
    /// 
    /// This function sets up the initial state of the pool with all necessary
    /// protection mechanisms and parameters. It performs extensive validation
    /// to ensure the pool starts in a safe state.
    pub fn initialize_pool(
        ctx: Context<contexts::InitializePool>,
        early_trade_fee_bps: u64,
        early_trade_window_seconds: u64,
        max_trade_size_bps: u64,
        min_trade_size: u64,
        cooldown_seconds: u64,
        max_daily_volume: u64,
        max_price_impact_bps: u64,
        circuit_breaker_threshold: u64,
        circuit_breaker_window: u64,
        circuit_breaker_cooldown: u64,
        rate_limit_window: u64,
        rate_limit_max: u32,
        fee_tiers: Vec<FeeTier>,
        snipe_protection_seconds: u64,
    ) -> Result<()> {
        let pool_state = &mut ctx.accounts.pool_state;
        let current_time = Clock::get()?.unix_timestamp;

        // Validate fee tiers
        utils::validate_fee_tiers(&fee_tiers)?;

        // Initialize pool state
        pool_state.version = 1;
        pool_state.migration_flag = false;
        pool_state.is_initialized = true;
        pool_state.admin = ctx.accounts.admin.key();
        pool_state.emergency_admin = ctx.accounts.admin.key(); // Initially same as admin
        pool_state.token_mint = ctx.accounts.token_mint.key();
        pool_state.token_decimals = ctx.accounts.token_mint.decimals;
        pool_state.total_fees_collected = 0;
        pool_state.total_liquidity = 0;
        pool_state.is_paused = false;
        pool_state.is_emergency_paused = false;
        pool_state.is_finalized = false;
        pool_state.pool_start_time = current_time as u64;
        pool_state.last_update = current_time as u64;
        pool_state.last_admin_update = current_time as u64;
        pool_state.emergency_action_scheduled_time = 0;
        pool_state.pending_update = None;
        pool_state.trade_settings = TradeSettings {
            max_size_bps: max_trade_size_bps,
            min_size: min_trade_size,
            cooldown_seconds,
            last_trade_time: 0,
            early_trade_fee_bps,
            early_trade_window_seconds,
        };
        pool_state.rate_limit = RateLimitSettings {
            window: rate_limit_window,
            count: 0,
            max: rate_limit_max,
            last_reset: current_time as u64,
        };
        pool_state.circuit_breaker = CircuitBreakerSettings {
            threshold: circuit_breaker_threshold,
            window: circuit_breaker_window,
            cooldown: circuit_breaker_cooldown,
            last_trigger: 0,
        };
        pool_state.volume = VolumeSettings {
            volume_24h: 0,
            last_update: current_time as u64,
            last_decay: current_time as u64,
            max_daily: max_daily_volume,
        };
        pool_state.protection = ProtectionSettings {
            snipe_protection_seconds,
            max_price_impact_bps,
        };
        pool_state.fee_tiers = fee_tiers;
        pool_state.fee_tiers_locked = false;
        pool_state.default_fee_bps = None;
        pool_state.trader_blacklist = Vec::new();

        emit!(PoolInitialized {
            pool: pool_state.key(),
            admin_pubkey: pool_state.admin,
            ts: current_time,
        });

        Ok(())
    }

    /// Add liquidity to the pool
    ///
    /// This function allows the admin to add liquidity to the pool before it starts.
    /// - Validates: token program, amount, pool state, token accounts
    /// - Transfers: tokens from admin to pool
    /// - Updates: pool state with new liquidity and timestamps
    pub fn add_liquidity(ctx: Context<contexts::AddLiquidity>, amount: u64) -> Result<()> {
        require!(
            ctx.accounts.token_program.key() == token::ID,
            ErrorCode::InvalidTokenProgram
        );
        require!(amount > 0, ErrorCode::InvalidAmount);
        let pool_state = &mut ctx.accounts.pool_state;
        require!(pool_state.pool_start_time == 0, ErrorCode::PoolAlreadyStarted);
        require!(!pool_state.is_paused, ErrorCode::PoolPaused);
        require!(
            ctx.accounts.admin_token_account.owner == ctx.accounts.admin.key(),
            ErrorCode::InvalidTokenAccount
        );
        require!(
            ctx.accounts.pool_token_account.owner == ctx.accounts.pool_authority.key(),
            ErrorCode::InvalidTokenAccount
        );
        require!(ctx.accounts.admin_token_account.delegate.is_none(), ErrorCode::TokenAccountDelegated);
        require!(ctx.accounts.pool_token_account.delegate.is_none(), ErrorCode::TokenAccountDelegated);
        let (pool_authority, _) = derive_pool_authority(&ctx.accounts.pool_state.key(), &program_id);
        require!(
            pool_authority == ctx.accounts.pool_authority.key(),
            ErrorCode::InvalidPoolAuthority
        );
        let current_time = Clock::get()?.unix_timestamp;
        require!(current_time >= 0, ErrorCode::InvalidTimestamp);
        let initial_admin_balance = ctx.accounts.admin_token_account.amount;
        let initial_pool_balance = ctx.accounts.pool_token_account.amount;
        pool_state.pool_start_time = current_time as u64;
        pool_state.total_liquidity = amount;
        pool_state.last_update = current_time as u64;
        let cpi_accounts = token::Transfer {
            from: ctx.accounts.admin_token_account.to_account_info(),
            to: ctx.accounts.pool_token_account.to_account_info(),
            authority: ctx.accounts.admin.to_account_info(),
        };
        let cpi_program = ctx.accounts.token_program.to_account_info();
        token::transfer(CpiContext::new(cpi_program, cpi_accounts), amount)?;
        require!(
            ctx.accounts.admin_token_account.amount == initial_admin_balance.checked_sub(amount).ok_or(ErrorCode::Overflow)?,
            ErrorCode::InvalidBalance
        );
        require!(
            ctx.accounts.pool_token_account.amount == initial_pool_balance.checked_add(amount).ok_or(ErrorCode::Overflow)?,
            ErrorCode::InvalidBalance
        );
        require!(
            ctx.accounts.pool_token_account.amount >= amount,
            ErrorCode::InsufficientPoolBalance
        );
        emit!(LiquidityAdded {
            pool: pool_state.key(),
            admin_pubkey: pool_state.admin,
            amount,
            ts: current_time as i64,
        });
        Ok(())
    }

    /// Remove liquidity from the pool
    ///
    /// This function allows the admin to withdraw liquidity from the pool.
    /// - Validates: token program, admin, pool state, token accounts, amount
    /// - Transfers: tokens from pool to admin
    /// - Updates: pool state with reduced liquidity and timestamps
    pub fn remove_liquidity(ctx: Context<contexts::AdminAction>, amount: u64) -> Result<()> {
        let pool_state = &mut ctx.accounts.pool_state;
        
        // Add reentrancy protection
        let _guard = ReentrancyGuard::new(pool_state)?;
        
        // FIX: Corrected validation and transfer logic to ensure proper authority checks and balance updates.
        require!(
            ctx.accounts.token_program.key() == token::ID,
            ErrorCode::InvalidTokenProgram
        );
        require!(ctx.accounts.admin.key() == pool_state.admin, ErrorCode::Unauthorized);
        require!(!pool_state.is_paused, ErrorCode::PoolPaused);
        require!(!pool_state.is_emergency_paused, ErrorCode::EmergencyPaused);
        require!(pool_state.total_liquidity >= amount, ErrorCode::InsufficientLiquidity);
        require!(amount > 0, ErrorCode::InvalidAmount);
        require!(
            ctx.accounts.admin_token_account.owner == ctx.accounts.admin.key(),
            ErrorCode::InvalidTokenAccount
        );
        // FIX: Corrected pool token account owner check to use pool_authority.
        require!(
            ctx.accounts.pool_token_account.owner == ctx.accounts.pool_authority.key(),
            ErrorCode::InvalidTokenAccount
        );
        require!(ctx.accounts.admin_token_account.delegate.is_none(), ErrorCode::TokenAccountDelegated);
        require!(ctx.accounts.pool_token_account.delegate.is_none(), ErrorCode::TokenAccountDelegated);
        // FIX: Added proper pool authority derivation and validation.
        let (pool_authority, _) = derive_pool_authority(&ctx.accounts.pool_state.key(), &program_id);
        require!(
            pool_authority == ctx.accounts.pool_authority.key(),
            ErrorCode::InvalidPoolAuthority
        );
        let current_time = Clock::get()?.unix_timestamp as u64;
        require!(current_time >= 0, ErrorCode::InvalidTimestamp);
        let initial_pool_balance = ctx.accounts.pool_token_account.amount;
        let initial_admin_balance = ctx.accounts.admin_token_account.amount;
        pool_state.total_liquidity = pool_state.total_liquidity.checked_sub(amount).ok_or(ErrorCode::Overflow)?;
        pool_state.last_update = current_time as i64;
        let cpi_accounts = token::Transfer {
            from: ctx.accounts.pool_token_account.to_account_info(),
            to: ctx.accounts.admin_token_account.to_account_info(),
            authority: ctx.accounts.pool_authority.to_account_info(),
        };
        let cpi_program = ctx.accounts.token_program.to_account_info();
        // FIX: Corrected signer seeds to use "pool_authority" instead of "pool_state".
        token::transfer(
            CpiContext::new_with_signer(
                cpi_program,
                cpi_accounts,
                &[&[
                    b"pool_authority",
                    ctx.accounts.pool_state.key().as_ref(),
                    &[*ctx.bumps.get("pool_authority").unwrap()],
                ]],
            ),
            amount,
        )?;
        // FIX: Corrected balance checks using proper field names and variables.
        require!(
            ctx.accounts.pool_token_account.amount == initial_pool_balance.checked_sub(amount).ok_or(ErrorCode::Overflow)?,
            ErrorCode::InvalidBalance
        );
        require!(
            ctx.accounts.admin_token_account.amount == initial_admin_balance.checked_add(amount).ok_or(ErrorCode::Overflow)?,
            ErrorCode::InvalidBalance
        );
        // FIX: Simplified pool balance check to verify sufficient liquidity after withdrawal.
        if pool_state.total_liquidity > 0 {
            require!(
                ctx.accounts.pool_token_account.amount >= pool_state.trade_settings.min_size,
                ErrorCode::InsufficientPoolBalance
            );
        }
        emit!(LiquidityRemoved {
            pool: pool_state.key(),
            // FIX: Corrected event field to use pool_state.admin instead of undefined pool_admin.
            admin_pubkey: pool_state.admin,
            amount,
            ts: current_time as i64,
        });
        Ok(())
    }

    /// Execute a trade in the pool with all protection mechanisms active
    ///
    /// This function implements the core trading logic with multiple layers of protection:
    /// - Snipe protection
    /// - Rate limiting
    /// - Circuit breaker
    /// - Price impact checks
    /// - Fee calculation
    /// - Volume tracking
    pub fn execute_trade(
        ctx: Context<contexts::ExecuteTrade>,
        amount_in: u64,
        minimum_amount_out: u64,
    ) -> Result<()> {
        let pool_state = &mut ctx.accounts.pool_state;
        let current_time = Clock::get()?.unix_timestamp as u64;

        // Validate trade parameters
        validation::validate_trade_parameters(pool_state, amount_in, current_time)?;

        // Calculate fee and execute trade
        let (fee_amount, fee_mode) = utils::calculate_fee(pool_state, amount_in, current_time as i64)?;
        let amount_after_fee = amount_in.checked_sub(fee_amount)
            .ok_or(ErrorCode::Overflow)?;

        // Execute the trade
        let amount_out = execute_token_transfer(
            ctx.accounts.into(),
            amount_after_fee,
            minimum_amount_out,
        )?;

        // Update pool state
        pool_state.total_fees_collected = pool_state.total_fees_collected
            .checked_add(fee_amount)
            .ok_or(ErrorCode::Overflow)?;
        pool_state.trade_settings.last_trade_time = current_time;
        pool_state.rate_limit.count = pool_state.rate_limit.count
            .checked_add(1)
            .ok_or(ErrorCode::Overflow)?;
        pool_state.volume.volume_24h = pool_state.volume.volume_24h
            .checked_add(amount_in)
            .ok_or(ErrorCode::Overflow)?;

        emit!(TradeExecuted {
            pool: pool_state.key(),
            buyer_pubkey: ctx.accounts.buyer.key(),
            amount_in,
            amount_out,
            fee_amount,
            fee_mode,
            ts: current_time as i64,
            token_mint: pool_state.token_mint,
        });

        Ok(())
    }

    /// Calculate fee based on trade timing and volume
    ///
    /// This function determines the appropriate fee to charge based on:
    /// 1. Whether the trade is within the early trade window
    /// 2. The current 24h volume and applicable fee tier
    /// 3. Returns both the fee amount and the fee mode for tracking
    fn calculate_fee(pool_state: &PoolState, amount_in: u64, current_time: i64) -> Result<(u64, u8)> {
        // Early trade fee if within protection window
        if current_time - pool_state.pool_start_time as i64 <= pool_state.trade_settings.early_trade_window_seconds as i64 {
            let fee = amount_in
                .checked_mul(pool_state.trade_settings.early_trade_fee_bps)
                .ok_or(ErrorCode::Overflow)?
                .checked_div(10000)
                .ok_or(ErrorCode::Overflow)?;
            
            // Use default fee if configured, otherwise minimum fee
            let effective_fee = if fee == 0 {
                pool_state.default_fee_bps
                    .map(|bps| amount_in.checked_mul(bps).ok_or(ErrorCode::Overflow)?.checked_div(10000).ok_or(ErrorCode::Overflow)?)
                    .unwrap_or(MINIMUM_FEE)
            } else {
                fee.max(MINIMUM_FEE)
            };
            
            return Ok((effective_fee, FEE_MODE_EARLY_TRADE));
        }

        // Find applicable fee tier based on volume
        for tier in &pool_state.fee_tiers {
            if pool_state.volume.volume_24h <= tier.volume_threshold {
                let fee = amount_in
                    .checked_mul(tier.fee_bps)
                    .ok_or(ErrorCode::Overflow)?
                    .checked_div(10000)
                    .ok_or(ErrorCode::Overflow)?;
                
                // Use default fee if configured, otherwise minimum fee
                let effective_fee = if fee == 0 {
                    pool_state.default_fee_bps
                        .map(|bps| amount_in.checked_mul(bps).ok_or(ErrorCode::Overflow)?.checked_div(10000).ok_or(ErrorCode::Overflow)?)
                        .unwrap_or(MINIMUM_FEE)
                } else {
                    fee.max(MINIMUM_FEE)
                };
                
                return Ok((effective_fee, FEE_MODE_TIER_BASED));
            }
        }

        // Use default fee if configured, otherwise minimum fee
        let fallback_fee = pool_state.default_fee_bps
            .map(|bps| amount_in.checked_mul(bps).ok_or(ErrorCode::Overflow)?.checked_div(10000).ok_or(ErrorCode::Overflow)?)
            .unwrap_or(MINIMUM_FEE);

        Ok((fallback_fee, FEE_MODE_NONE))
    }

    /// Calculate price impact of a trade
    ///
    /// This function calculates the price impact of a trade in basis points,
    /// taking into account token decimals for accurate calculation.
    fn calculate_price_impact(amount_in: u64, pool_balance: u64) -> Result<u64> {
        require!(pool_balance > 0, ErrorCode::InvalidPoolBalance);
        amount_in
            .checked_mul(10000)
            .ok_or(ErrorCode::Overflow)?
            .checked_div(pool_balance)
            .ok_or(ErrorCode::Overflow)
    }

    /// Blacklist a trader to prevent them from trading
    ///
    /// This function allows the admin to blacklist a trader with:
    /// - Admin must be a signer
    /// - Trader cannot be already blacklisted
    /// - Trader cannot be the admin or emergency admin
    pub fn blacklist_trader(ctx: Context<contexts::ManageBlacklist>, trader: Pubkey) -> Result<()> {
        let pool_state = &mut ctx.accounts.pool_state;
        let current_time = Clock::get()?.unix_timestamp as u64;
        
        // Add reentrancy protection
        let _guard = ReentrancyGuard::new(pool_state)?;
        
        utils::process_blacklist_operations(
            pool_state,
            vec![trader],
            BlacklistOperation::Add,
            current_time,
        )
    }

    /// Remove a trader from the blacklist
    ///
    /// This function allows the admin to remove a trader from the blacklist with:
    /// - Admin must be a signer
    /// - Trader must be currently blacklisted
    pub fn remove_from_blacklist(ctx: Context<contexts::ManageBlacklist>, trader: Pubkey) -> Result<()> {
        let pool_state = &mut ctx.accounts.pool_state;
        let current_time = Clock::get()?.unix_timestamp as u64;
        
        // Add reentrancy protection
        let _guard = ReentrancyGuard::new(pool_state)?;
        
        utils::process_blacklist_operations(
            pool_state,
            vec![trader],
            BlacklistOperation::Remove,
            current_time,
        )
    }

    /// Batch blacklist multiple traders efficiently
    ///
    /// This function allows the admin to blacklist multiple traders in a single transaction with:
    /// - Admin must be a signer
    /// - Maximum of 50 traders per batch
    /// - Each trader must not be already blacklisted
    /// - No trader can be the admin or emergency admin
    pub fn batch_blacklist_traders(ctx: Context<contexts::ManageBlacklist>, traders: Vec<Pubkey>) -> Result<()> {
        let pool_state = &mut ctx.accounts.pool_state;
        let current_time = Clock::get()?.unix_timestamp as u64;
        
        utils::process_blacklist_operations(
            pool_state,
            traders,
            BlacklistOperation::Add,
            current_time,
        )
    }

    /// Batch unblacklist multiple traders efficiently
    ///
    /// NEW: Added to allow the admin to remove multiple traders from the blacklist in a single transaction.
    /// - Admin must be a signer
    /// - Maximum of 50 traders per batch
    /// - Each trader must be currently blacklisted
    pub fn batch_unblacklist_traders(ctx: Context<contexts::ManageBlacklist>, traders: Vec<Pubkey>) -> Result<()> {
        let pool_state = &mut ctx.accounts.pool_state;
        let current_time = Clock::get()?.unix_timestamp as u64;
        
        utils::process_blacklist_operations(
            pool_state,
            traders,
            BlacklistOperation::Remove,
            current_time,
        )
    }

    /// Withdraw collected fees from the pool
    ///
    /// This function allows the admin to withdraw collected fees with:
    /// - Admin must be a signer
    /// - Fees must be available to withdraw
    /// - Reentrancy protection
    pub fn withdraw_fees(ctx: Context<contexts::WithdrawFees>) -> Result<()> {
        let pool_state = &mut ctx.accounts.pool_state;
        let current_time = Clock::get()?.unix_timestamp as u64;

        // Reentrancy protection
        let _guard = ReentrancyGuard::new(pool_state)?;

        // Validate admin
        utils::require_admin!(ctx, pool_state);

        // Validate token accounts
        require!(
            ctx.accounts.pool_token_account.mint == pool_state.token_mint,
            ErrorCode::InvalidTokenAccount
        );
        require!(
            ctx.accounts.admin_token_account.mint == pool_state.token_mint,
            ErrorCode::InvalidTokenAccount
        );

        // Check if fees are available
        let fees_to_withdraw = pool_state.total_fees_collected;
        require!(fees_to_withdraw > 0, ErrorCode::NoFeesAvailable);

        // Reset fees before transfer to prevent reentrancy
        pool_state.total_fees_collected = 0;

        // Transfer fees to admin
        token::transfer(
            CpiContext::new_with_signer(
                ctx.accounts.token_program.to_account_info(),
                Transfer {
                    from: ctx.accounts.pool_token_account.to_account_info(),
                    to: ctx.accounts.admin_token_account.to_account_info(),
                    authority: ctx.accounts.pool_authority.to_account_info(),
                },
                &[&[
                    b"pool_authority",
                    ctx.accounts.pool_state.key().as_ref(),
                    &[*ctx.bumps.get("pool_authority").unwrap()],
                ]],
            ),
            fees_to_withdraw,
        )?;

        // Emit withdrawal event
        emit!(FeesWithdrawn {
            pool: pool_state.key(),
            admin_pubkey: ctx.accounts.admin.key(),
            amount: fees_to_withdraw,
            ts: current_time as i64,
        });

        Ok(())
    }

    /// Lock fee tiers to prevent further changes
    ///
    /// This function allows the admin to lock fee tiers with:
    /// - Admin must be a signer
    /// - Fee tiers must not be already locked
    pub fn lock_fee_tiers(ctx: Context<contexts::LockFeeTiers>) -> Result<()> {
        let pool_state = &mut ctx.accounts.pool_state;
        let current_time = Clock::get()?.unix_timestamp as u64;

        // Validate admin
        utils::require_admin!(ctx, pool_state);

        // Check if fee tiers are already locked
        require!(!pool_state.fee_tiers_locked, ErrorCode::FeeTiersLocked);

        // Lock fee tiers
        pool_state.fee_tiers_locked = true;

        // Emit locking event
        emit!(FeeTiersLocked {
            pool: pool_state.key(),
            admin_pubkey: ctx.accounts.admin.key(),
            ts: current_time as i64,
        });

        Ok(())
    }

    /// Unlock fee tiers to allow future changes
    ///
    /// NEW: Added to allow the admin to unlock fee tiers with a 24-hour timelock.
    /// - Admin must be a signer
    /// - Fee tiers must be currently locked
    /// - Schedules unlock via pending_update for delayed execution
    pub fn unlock_fee_tiers(ctx: Context<contexts::AdminAction>) -> Result<()> {
        let pool_state = &mut ctx.accounts.pool_state;
        let current_time = Clock::get()?.unix_timestamp as u64;

        // Validate admin
        utils::require_admin!(ctx, pool_state);

        // Check if fee tiers are locked
        require!(pool_state.fee_tiers_locked, ErrorCode::FeeTiersNotLocked);

        // Schedule unlock with 24-hour timelock
        pool_state.pending_update = Some(PendingUpdate {
            fee_tiers_locked: Some(false),
            scheduled_time: current_time as i64 + 86400,
            ..Default::default()
        });

        // Emit unlock scheduled event
        // NEW: Added event for transparency of unlock scheduling.
        emit!(FeeTiersUnlockScheduled {
            pool: pool_state.key(),
            admin_pubkey: ctx.accounts.admin.key(),
            scheduled_time: current_time + 86400,
        });

        Ok(())
    }

    /// Schedule a parameter update with a 24-hour timelock
    ///
    /// This function allows the admin to schedule changes to pool parameters.
    /// - Validates: admin, new fee tiers, parameter relationships
    /// - Stores: pending update with scheduled execution time
    pub fn schedule_parameter_update(
        ctx: Context<contexts::AdminAction>,
        early_trade_fee_bps: Option<u64>,
        early_trade_window_seconds: Option<u64>,
        max_trade_size_bps: Option<u64>,
        min_trade_size: Option<u64>,
        cooldown_seconds: Option<u64>,
        is_paused: Option<bool>,
        is_emergency_paused: Option<bool>,
        fee_tiers: Option<Vec<FeeTier>>,
        max_daily_volume: Option<u64>,
        max_price_impact_bps: Option<u64>,
        circuit_breaker_threshold: Option<u64>,
        circuit_breaker_window: Option<u64>,
        circuit_breaker_cooldown: Option<u64>,
        rate_limit_window: Option<u64>,
        rate_limit_max: Option<u32>,
        fee_tiers_locked: Option<bool>, // NEW: Added to support fee tier unlocking.
    ) -> Result<()> {
        let pool_state = &mut ctx.accounts.pool_state;
        let current_time = Clock::get()?.unix_timestamp as u64;
        
        // Add reentrancy protection
        let _guard = ReentrancyGuard::new(pool_state)?;
        
        utils::require_admin!(ctx, pool_state);
        if let Some(new_fee_tiers) = &fee_tiers {
            require!(!new_fee_tiers.is_empty(), ErrorCode::InvalidFeeTier);
            require!(new_fee_tiers.len() <= MAX_FEE_TIERS, ErrorCode::TooManyFeeTiers);
            let min_spacing = pool_state.volume.max_daily
                .checked_mul(MIN_FEE_TIER_SPACING_BPS)
                .ok_or(ErrorCode::Overflow)?
                .checked_div(10000)?;
            for (i, tier) in new_fee_tiers.iter().enumerate() {
                require!(tier.fee_bps <= MAX_TIER_FEE_BPS, ErrorCode::FeeTooHigh);
                require!(tier.volume_threshold > 0, ErrorCode::InvalidFeeTier);
                if i > 0 {
                    let prev = &new_fee_tiers[i - 1];
                    require!(
                        tier.volume_threshold > prev.volume_threshold,
                        ErrorCode::DuplicateFeeTierThreshold
                    );
                    require!(
                        tier.volume_threshold - prev.volume_threshold >= min_spacing,
                        ErrorCode::InvalidFeeTierSpacing
                    );
                    require!(
                        tier.fee_bps <= prev.fee_bps,
                        ErrorCode::InvalidFeeTier
                    );
                }
            }
        }
        let pending_update = PendingUpdate {
            fee_tiers_locked,
            scheduled_time: current_time + 86400,
            ..Default::default()
        };
        pool_state.pending_update = Some(pending_update);
        emit!(ParameterUpdateScheduled {
            pool: pool_state.key(),
            admin_pubkey: ctx.accounts.admin.key(),
            scheduled_time: current_time + 86400,
        });
        Ok(())
    }

    /// Cancel a scheduled parameter update
    ///
    /// This function allows the admin to cancel a pending parameter update before the timelock expires.
    /// - Validates: admin, presence of pending update
    /// - Clears: pending update
    pub fn cancel_parameter_update(ctx: Context<contexts::AdminAction>) -> Result<()> {
        let pool_state = &mut ctx.accounts.pool_state;
        let current_time = Clock::get()?.unix_timestamp;
        
        // Add reentrancy protection
        let _guard = ReentrancyGuard::new(pool_state)?;
        
        utils::require_admin!(ctx, pool_state);
        require!(pool_state.pending_update.is_some(), ErrorCode::NoPendingUpdate);
        pool_state.pending_update = None;
        emit!(ParameterUpdateCancelled {
            pool: pool_state.key(),
            admin_pubkey: ctx.accounts.admin.key(),
            ts: current_time,
        });
        Ok(())
    }

    /// Apply a scheduled parameter update
    ///
    /// This function applies a pending parameter update after the timelock expires.
    /// - Validates: admin, timelock, parameter relationships
    /// - Updates: pool state with new parameters
    pub fn apply_parameter_update(ctx: Context<contexts::AdminAction>) -> Result<()> {
        let pool_state = &mut ctx.accounts.pool_state;
        let current_time = Clock::get()?.unix_timestamp as u64;

        // Validate pending update exists and timelock has expired
        let pending_update = pool_state.pending_update.as_ref()
            .ok_or(ErrorCode::NoPendingUpdate)?;
        require!(
            current_time >= pending_update.scheduled_time,
            ErrorCode::TimelockNotExpired
        );

        // Apply trade settings updates
        if let Some(early_trade_fee_bps) = pending_update.early_trade_fee_bps {
            pool_state.trade_settings.early_trade_fee_bps = early_trade_fee_bps;
        }
        if let Some(early_trade_window_seconds) = pending_update.early_trade_window_seconds {
            pool_state.trade_settings.early_trade_window_seconds = early_trade_window_seconds;
        }
        if let Some(max_trade_size_bps) = pending_update.max_trade_size_bps {
            pool_state.trade_settings.max_size_bps = max_trade_size_bps;
        }
        if let Some(min_trade_size) = pending_update.min_trade_size {
            pool_state.trade_settings.min_size = min_trade_size;
        }
        if let Some(cooldown_seconds) = pending_update.cooldown_seconds {
            pool_state.trade_settings.cooldown_seconds = cooldown_seconds;
        }

        // Apply protection settings updates
        if let Some(max_daily_volume) = pending_update.max_daily_volume {
            pool_state.volume.max_daily = max_daily_volume;
        }
        if let Some(max_price_impact_bps) = pending_update.max_price_impact_bps {
            pool_state.protection.max_price_impact_bps = max_price_impact_bps;
        }

        // Apply circuit breaker settings updates
        if let Some(circuit_breaker_threshold) = pending_update.circuit_breaker_threshold {
            pool_state.circuit_breaker.threshold = circuit_breaker_threshold;
        }
        if let Some(circuit_breaker_window) = pending_update.circuit_breaker_window {
            pool_state.circuit_breaker.window = circuit_breaker_window;
        }
        if let Some(circuit_breaker_cooldown) = pending_update.circuit_breaker_cooldown {
            pool_state.circuit_breaker.cooldown = circuit_breaker_cooldown;
        }

        // Apply rate limit settings updates
        if let Some(rate_limit_window) = pending_update.rate_limit_window {
            pool_state.rate_limit.window = rate_limit_window;
        }
        if let Some(rate_limit_max) = pending_update.rate_limit_max {
            pool_state.rate_limit.max = rate_limit_max;
        }

        // Apply fee tier updates
        if let Some(fee_tiers) = &pending_update.fee_tiers {
            // Validate new fee tiers
            utils::validate_fee_tiers(fee_tiers)?;
            pool_state.fee_tiers = fee_tiers.clone();
        }

        // Apply state updates
        if let Some(is_paused) = pending_update.is_paused {
            pool_state.is_paused = is_paused;
        }
        if let Some(is_emergency_paused) = pending_update.is_emergency_paused {
            pool_state.is_emergency_paused = is_emergency_paused;
        }
        if let Some(fee_tiers_locked) = pending_update.fee_tiers_locked {
            pool_state.fee_tiers_locked = fee_tiers_locked;
        }

        // Clear pending update
        pool_state.pending_update = None;
        pool_state.last_update = current_time;

        emit!(ParametersUpdated {
            pool: pool_state.key(),
            admin_pubkey: pool_state.admin,
            ts: current_time as i64,
        });

        Ok(())
    }

    /// Schedule an emergency pause with a 1-hour timelock
    ///
    /// This function allows the emergency admin to schedule a pool pause.
    /// - Validates: emergency admin
    /// - Sets: scheduled pause time
    pub fn schedule_emergency_pause(ctx: Context<contexts::EmergencyAction>) -> Result<()> {
        let pool_state = &mut ctx.accounts.pool_state;
        let current_time = Clock::get()?.unix_timestamp as u64;
        utils::require_emergency_admin!(ctx, pool_state);
        pool_state.emergency_action_scheduled_time = current_time + EMERGENCY_TIMELOCK_SECONDS;
        emit!(EmergencyPauseScheduled {
            pool: pool_state.key(),
            emergency_admin_pubkey: pool_state.emergency_admin,
            scheduled_time: current_time + EMERGENCY_TIMELOCK_SECONDS,
        });
        Ok(())
    }

    /// Apply a scheduled emergency pause
    ///
    /// This function applies a scheduled pause after the timelock expires.
    /// - Validates: emergency admin, timelock
    /// - Sets: pool to emergency paused state
    pub fn apply_emergency_pause(ctx: Context<contexts::EmergencyAction>) -> Result<()> {
        let pool_state = &mut ctx.accounts.pool_state;
        let current_time = Clock::get()?.unix_timestamp as u64;
        utils::require_emergency_admin!(ctx, pool_state);
        require!(
            current_time >= pool_state.emergency_action_scheduled_time,
            ErrorCode::TimelockNotExpired
        );
        pool_state.is_emergency_paused = true;
        pool_state.last_update = current_time;
        pool_state.emergency_action_scheduled_time = 0;
        emit!(EmergencyPaused {
            pool: pool_state.key(),
            emergency_admin_pubkey: pool_state.emergency_admin,
            ts: current_time as i64,
        });
        Ok(())
    }

    /// Schedule an emergency resume with a 1-hour timelock
    ///
    /// This function allows the emergency admin to schedule a pool resume.
    /// - Validates: emergency admin
    /// - Sets: scheduled resume time
    pub fn schedule_emergency_resume(ctx: Context<contexts::EmergencyAction>) -> Result<()> {
        let pool_state = &mut ctx.accounts.pool_state;
        let current_time = Clock::get()?.unix_timestamp as u64;
        utils::require_emergency_admin!(ctx, pool_state);
        pool_state.emergency_action_scheduled_time = current_time + EMERGENCY_TIMELOCK_SECONDS;
        emit!(EmergencyResumeScheduled {
            pool: pool_state.key(),
            emergency_admin_pubkey: pool_state.emergency_admin,
            scheduled_time: current_time + EMERGENCY_TIMELOCK_SECONDS,
        });
        Ok(())
    }

    /// Apply a scheduled emergency resume
    ///
    /// This function applies a scheduled resume after the timelock expires.
    /// - Validates: emergency admin, timelock
    /// - Sets: pool to non-emergency paused state
    pub fn apply_emergency_resume(ctx: Context<contexts::EmergencyAction>) -> Result<()> {
        let pool_state = &mut ctx.accounts.pool_state;
        let current_time = Clock::get()?.unix_timestamp as u64;
        utils::require_emergency_admin!(ctx, pool_state);
        require!(
            current_time >= pool_state.emergency_action_scheduled_time,
            ErrorCode::TimelockNotExpired
        );
        pool_state.is_emergency_paused = false;
        pool_state.last_update = current_time;
        pool_state.emergency_action_scheduled_time = 0;
        emit!(EmergencyResumed {
            pool: pool_state.key(),
            emergency_admin_pubkey: pool_state.emergency_admin,
            ts: current_time as i64,
        });
        Ok(())
    }

    /// Reset the circuit breaker
    ///
    /// This function allows the admin to reset the circuit breaker after its cooldown.
    /// - Validates: admin, timestamp, cooldown
    /// - Resets: circuit breaker and 24h volume
    pub fn reset_circuit_breaker(ctx: Context<contexts::AdminAction>) -> Result<()> {
        let pool_state = &mut ctx.accounts.pool_state;
        let current_time = Clock::get()?.unix_timestamp as u64;
        
        // Add reentrancy protection
        let _guard = ReentrancyGuard::new(pool_state)?;
        
        utils::require_admin!(ctx, pool_state);
        require!(current_time >= 0, ErrorCode::InvalidTimestamp);
        require!(
            current_time - pool_state.circuit_breaker.last_trigger >= pool_state.circuit_breaker.cooldown,
            ErrorCode::CircuitBreakerCooldown
        );
        pool_state.circuit_breaker.last_trigger = current_time;
        pool_state.volume.volume_24h = 0;
        pool_state.volume.last_update = current_time;
        emit!(CircuitBreakerReset {
            pool: pool_state.key(),
            admin_pubkey: pool_state.admin,
            ts: current_time as i64,
        });
        Ok(())
    }

    /// Update the pool admin with cooldown protection
    ///
    /// This function allows changing the pool admin with the following protections:
    /// - 24-hour cooldown between admin changes
    /// - New admin must be different from current and emergency admin
    /// - Current admin must be a signer
    pub fn update_admin(ctx: Context<contexts::AdminAction>, new_admin: Pubkey) -> Result<()> {
        let pool_state = &mut ctx.accounts.pool_state;
        let current_time = Clock::get()?.unix_timestamp as u64;

        // Validate current admin
        utils::require_admin!(ctx, pool_state);

        // Check admin change cooldown
        require!(
            current_time - pool_state.last_admin_update >= ADMIN_UPDATE_COOLDOWN,
            ErrorCode::AdminUpdateTooFrequent
        );

        // Validate new admin
        require!(new_admin != pool_state.admin, ErrorCode::InvalidNewAdmin);
        require!(new_admin != pool_state.emergency_admin, ErrorCode::InvalidNewAdmin);

        // Update admin and timestamp
        let old_admin = pool_state.admin;
        pool_state.admin = new_admin;
        pool_state.last_admin_update = current_time;

        // Emit admin update event
        emit!(AdminUpdated {
            pool: pool_state.key(),
            old_admin_pubkey: old_admin,
            new_admin_pubkey: new_admin,
            ts: current_time as i64,
        });

        Ok(())
    }

    /// Reset the pending update
    pub fn reset_pending_update(ctx: Context<contexts::AdminAction>) -> Result<()> {
        let pool_state = &mut ctx.accounts.pool_state;
        let current_time = Clock::get()?.unix_timestamp as u64;
        
        // Add reentrancy protection
        let _guard = ReentrancyGuard::new(pool_state)?;
        
        utils::require_admin!(ctx, pool_state);

        // Clear pending update
        pool_state.pending_update = None;

        // Emit event
        emit!(ParameterUpdateCancelled {
            pool: pool_state.key(),
            admin_pubkey: ctx.accounts.admin.key(),
            ts: current_time as i64,
        });

        Ok(())
    }

    /// Toggle the pool pause state
    pub fn toggle_pause(ctx: Context<contexts::AdminAction>) -> Result<()> {
        let pool_state = &mut ctx.accounts.pool_state;
        let current_time = Clock::get()?.unix_timestamp as u64;
        
        pool_state.toggle_pause(current_time)
    }

    // Add fee tier validation function
    pub fn validate_fee_tiers(fee_tiers: &[FeeTier]) -> Result<()> {
        require!(!fee_tiers.is_empty(), ErrorCode::InvalidFeeTier);
        require!(fee_tiers.len() <= MAX_FEE_TIERS, ErrorCode::TooManyFeeTiers);

        // Check for duplicate thresholds
        let mut thresholds: Vec<u64> = fee_tiers.iter().map(|tier| tier.volume_threshold).collect();
        thresholds.sort_unstable();
        thresholds.dedup();
        require!(thresholds.len() == fee_tiers.len(), ErrorCode::DuplicateFeeTierThreshold);

        // Validate fee ranges and spacing
        for tier in fee_tiers {
            require!(tier.fee_bps >= MINIMUM_FEE, ErrorCode::FeeTooLow);
            require!(tier.fee_bps <= MAX_TIER_FEE_BPS, ErrorCode::FeeTooHigh);
        }

        // Check for proper spacing between thresholds
        for i in 1..fee_tiers.len() {
            let spacing = fee_tiers[i].volume_threshold
                .checked_sub(fee_tiers[i - 1].volume_threshold)
                .ok_or(ErrorCode::Overflow)?;
            require!(spacing >= MIN_FEE_TIER_SPACING_BPS, ErrorCode::InvalidFeeTierSpacing);
        }

        Ok(())
    }
}

// Move account contexts to a separate module
mod contexts {
    use super::*;

    #[derive(Accounts)]
    pub struct InitializePool<'info> {
        #[account(
            init,
            payer = admin,
            space = PoolState::calculate_space(),
            seeds = [b"pool_state", admin.key().as_ref()],
            bump
        )]
        pub pool_state: Account<'info, PoolState>,
        #[account(mut)]
        pub admin: Signer<'info>,
        pub token_mint: Account<'info, Mint>,
        pub system_program: Program<'info, System>,
        pub token_program: Program<'info, Token>,
        pub rent: Sysvar<'info, Rent>,
    }

    #[derive(Accounts)]
    pub struct AddLiquidity<'info> {
        #[account(mut)]
        pub pool_state: Account<'info, PoolState>,
        #[account(mut)]
        pub admin: Signer<'info>,
        #[account(mut)]
        pub admin_token_account: Account<'info, TokenAccount>,
        #[account(mut)]
        pub pool_token_account: Account<'info, TokenAccount>,
        pub pool_authority: AccountInfo<'info>,
        pub token_program: Program<'info, Token>,
    }

    #[derive(Accounts)]
    pub struct ExecuteTrade<'info> {
        #[account(mut)]
        pub pool_state: Account<'info, PoolState>,
        #[account(mut)]
        pub buyer: Signer<'info>,
        #[account(mut)]
        pub buyer_token_account: Account<'info, TokenAccount>,
        #[account(mut)]
        pub pool_token_account: Account<'info, TokenAccount>,
        pub pool_authority: AccountInfo<'info>,
        pub token_program: Program<'info, Token>,
    }

    #[derive(Accounts)]
    pub struct ManageBlacklist<'info> {
        #[account(mut)]
        pub pool_state: Account<'info, PoolState>,
        #[account(mut)]
        pub admin: Signer<'info>,
        /// CHECK: This is the reentrancy guard PDA
        #[account(
            seeds = [b"reentrancy_guard", pool_state.key().as_ref()],
            bump,
            constraint = reentrancy_guard.to_account_info().owner == program_id
        )]
        pub reentrancy_guard: UncheckedAccount<'info>,
    }

    #[derive(Accounts)]
    pub struct AdminAction<'info> {
        #[account(mut)]
        pub pool_state: Account<'info, PoolState>,
        #[account(mut)]
        pub admin: Signer<'info>,
        /// CHECK: This is the reentrancy guard PDA
        #[account(
            seeds = [b"reentrancy_guard", pool_state.key().as_ref()],
            bump,
            constraint = reentrancy_guard.to_account_info().owner == program_id
        )]
        pub reentrancy_guard: UncheckedAccount<'info>,
    }

    #[derive(Accounts)]
    pub struct WithdrawFees<'info> {
        #[account(mut)]
        pub pool_state: Account<'info, PoolState>,
        #[account(mut)]
        pub admin: Signer<'info>,
        #[account(mut)]
        pub pool_token_account: Account<'info, TokenAccount>,
        #[account(mut)]
        pub admin_token_account: Account<'info, TokenAccount>,
        pub pool_authority: AccountInfo<'info>,
        pub token_program: Program<'info, Token>,
    }

    #[derive(Accounts)]
    pub struct LockFeeTiers<'info> {
        #[account(mut)]
        pub pool_state: Account<'info, PoolState>,
        #[account(mut)]
        pub admin: Signer<'info>,
    }

    #[derive(Accounts)]
    pub struct EmergencyAction<'info> {
        #[account(mut)]
        pub pool_state: Account<'info, PoolState>,
        #[account(mut)]
        pub emergency_admin: Signer<'info>,
    }

    #[derive(Accounts)]
    pub struct SimulateTrade<'info> {
        pub pool_state: Account<'info, PoolState>,
    }
}

// Add helper function for PDA derivation with proper error handling
pub fn derive_pool_authority(pool_state: &Pubkey, program_id: &Pubkey) -> Result<(Pubkey, u8)> {
    Pubkey::find_program_address(
        &[b"pool_authority", pool_state.as_ref()],
        program_id,
    ).ok_or(ErrorCode::InvalidPoolAuthority)
}

// Add helper function for CPI context with proper error handling
pub fn with_pool_signer<'info>(
    program_id: &Pubkey,
    pool_state: &Account<'info, PoolState>,
    remaining_accounts: &[AccountInfo<'info>],
) -> Result<CpiContext<'_, '_, '_, 'info, TokenTransfer>> {
    let (pool_authority, bump) = derive_pool_authority(&pool_state.key(), program_id)?;
    
    let seeds = &[
        b"pool_authority".as_ref(),
        pool_state.key().as_ref(),
        &[bump],
    ];
    
    Ok(CpiContext::new_with_signer(
        remaining_accounts[0].clone(),
        TokenTransfer {
            from: remaining_accounts[1].clone(),
            to: remaining_accounts[2].clone(),
            authority: pool_authority,
        },
        &[seeds],
    ))
}

// Update execute_trade to use explicit pause check
pub fn execute_trade(
    ctx: Context<contexts::ExecuteTrade>,
    amount_in: u64,
    minimum_amount_out: u64,
) -> Result<()> {
    let pool_state = &mut ctx.accounts.pool_state;
    let current_time = Clock::get()?.unix_timestamp as u64;

    // Explicit pause check
    require!(!pool_state.is_paused, ErrorCode::PoolPaused);
    require!(!pool_state.is_emergency_paused, ErrorCode::EmergencyPaused);
    require!(!pool_state.is_finalized, ErrorCode::PoolFinalized);

    // Decay volume before processing trade
    pool_state.decay_volume(current_time)?;

    // Validate pool state
    utils::validate_trader(&ctx.accounts.buyer.key(), pool_state)?;

    // Check freeze authority
    let token_mint = ctx.accounts.token_mint;
    if token_mint.freeze_authority.is_some() {
        emit!(FreezeAuthorityWarning {
            pool: pool_state.key(),
            token_mint: token_mint.key(),
            ts: current_time as i64,
        });
        return Err(ErrorCode::TokenMintHasFreezeAuthority.into());
    }

    // Add reentrancy protection
    let _guard = ReentrancyGuard::new(pool_state)?;

    // Check all protection mechanisms
    pool_state.check_circuit_breaker(current_time)?;
    pool_state.check_rate_limit(current_time)?;
    pool_state.check_blacklist(&ctx.accounts.buyer.key())?;
    pool_state.check_snipe_protection(current_time)?;
    pool_state.check_price_impact(amount_in, ctx.accounts.pool_token_account.amount)?;

    // Calculate fee and execute trade
    let (fee_amount, fee_mode) = utils::calculate_fee(pool_state, amount_in, current_time as i64)?;
    let amount_out = amount_in.checked_sub(fee_amount).ok_or(ErrorCode::Overflow)?;

    if amount_out < minimum_amount_out {
        emit!(OperationFailed {
            pool: pool_state.key(),
            operation: "execute_trade".to_string(),
            reason: "Slippage exceeded".to_string(),
            ts: current_time as i64,
        });
        return Err(ErrorCode::SlippageExceeded.into());
    }

    // Execute the trade
    token::transfer(
        CpiContext::new(
            ctx.accounts.token_program.to_account_info(),
            token::Transfer {
                from: ctx.accounts.buyer_token_account.to_account_info(),
                to: ctx.accounts.pool_token_account.to_account_info(),
                authority: ctx.accounts.buyer.to_account_info(),
            },
        ),
        amount_in,
    )?;

    // Update pool state
    pool_state.total_liquidity = pool_state.total_liquidity.checked_add(amount_in).ok_or(ErrorCode::Overflow)?;
    pool_state.total_fees_collected = pool_state.total_fees_collected.checked_add(fee_amount).ok_or(ErrorCode::Overflow)?;
    pool_state.trade_settings.last_trade_time = current_time;
    pool_state.rate_limit.count = pool_state.rate_limit.count.checked_add(1).ok_or(ErrorCode::Overflow)?;
    pool_state.volume.volume_24h = pool_state.volume.volume_24h.checked_add(amount_in).ok_or(ErrorCode::Overflow)?;

    // Emit trade event
    emit!(TradeExecuted {
        pool: pool_state.key(),
        buyer_pubkey: ctx.accounts.buyer.key(),
        amount_in,
        amount_out,
        fee_amount,
        fee_mode,
        ts: current_time as i64,
        token_mint: pool_state.token_mint,
    });

    Ok(())
}

#[account]
#[derive(AnchorSerialize, AnchorDeserialize, Clone)]
pub struct PoolState {
    pub version: u8,
    pub migration_flag: bool,
    pub is_initialized: bool,
    pub admin: Pubkey,
    pub emergency_admin: Pubkey,
    pub token_mint: Pubkey,
    pub token_decimals: u8,
    pub total_fees_collected: u64,
    pub total_liquidity: u64,
    pub is_paused: bool,
    pub is_emergency_paused: bool,
    pub is_finalized: bool,
    pub pool_start_time: u64,
    pub last_update: u64,
    pub last_admin_update: u64,
    pub emergency_action_scheduled_time: u64,
    pub pending_update: Option<PendingUpdate>,
    pub trade_settings: TradeSettings,
    pub rate_limit: RateLimitSettings,
    pub circuit_breaker: CircuitBreakerSettings,
    pub volume: VolumeSettings,
    pub protection: ProtectionSettings,
    pub fee_tiers: Vec<FeeTier>,
    pub fee_tiers_locked: bool,
    pub default_fee_bps: Option<u64>,
    pub trader_blacklist: Vec<Pubkey>,
}

impl PoolState {
    pub fn calculate_space() -> usize {
        // Calculate total size including all fields
        let size = 8 + // discriminator
            1 + // version
            1 + // migration_flag
            1 + // is_initialized
            32 + // admin
            32 + // emergency_admin
            32 + // token_mint
            1 + // token_decimals
            8 + // total_fees_collected
            8 + // total_liquidity
            1 + // is_paused
            1 + // is_emergency_paused
            1 + // is_finalized
            8 + // pool_start_time
            8 + // last_update
            8 + // last_admin_update
            8 + // emergency_action_scheduled_time
            1 + // pending_update Option discriminator
            8 + // pending_update timestamp
            1 + // pending_update is_paused
            1 + // pending_update is_emergency_paused
            1 + // pending_update fee_tiers_locked
            8 + // trade_settings max_size_bps
            8 + // trade_settings min_size
            8 + // trade_settings cooldown_seconds
            8 + // trade_settings last_trade_time
            8 + // trade_settings early_trade_fee_bps
            8 + // trade_settings early_trade_window_seconds
            8 + // rate_limit window
            4 + // rate_limit count
            4 + // rate_limit max
            8 + // rate_limit last_reset
            8 + // circuit_breaker threshold
            8 + // circuit_breaker window
            8 + // circuit_breaker cooldown
            8 + // circuit_breaker last_trigger
            8 + // volume volume_24h
            8 + // volume last_update
            8 + // volume last_decay
            8 + // volume max_daily
            8 + // protection snipe_protection_seconds
            8 + // protection max_price_impact_bps
            4 + // fee_tiers Vec length
            (32 * 100) + // fee_tiers Vec capacity (max 100 tiers)
            1 + // fee_tiers_locked
            1 + // default_fee_bps Option discriminator
            8 + // default_fee_bps
            4 + // trader_blacklist Vec length
            (32 * 1000); // trader_blacklist Vec capacity (max 1000 traders)

        // Validate against Solana's maximum account size
        if size > 10240 {
            panic!("Account size {} exceeds Solana's maximum size of 10240 bytes", size);
        }

        size
    }

    pub fn toggle_pause(&mut self, current_time: u64) -> Result<()> {
        self.is_paused = !self.is_paused;
        self.last_update = current_time;

        if self.is_paused {
            emit!(PoolPaused {
                pool: self.key(),
                admin_pubkey: self.admin,
                ts: current_time as i64,
            });
        } else {
            emit!(PoolResumed {
                pool: self.key(),
                admin_pubkey: self.admin,
                ts: current_time as i64,
            });
        }

        Ok(())
    }

    pub fn toggle_emergency_pause(&mut self, current_time: u64) -> Result<()> {
        self.is_emergency_paused = !self.is_emergency_paused;
        self.last_update = current_time;

        if self.is_emergency_paused {
            emit!(EmergencyPaused {
                pool: self.key(),
                emergency_admin_pubkey: self.emergency_admin,
                ts: current_time as i64,
            });
        } else {
            emit!(EmergencyResumed {
                pool: self.key(),
                emergency_admin_pubkey: self.emergency_admin,
                ts: current_time as i64,
            });
        }

        Ok(())
    }

    pub fn decay_volume(&mut self, current_time: u64) -> Result<()> {
        if current_time - self.volume.last_decay >= 3600 { // Decay every hour
            let hours_passed = (current_time - self.volume.last_decay) / 3600;
            let decay_factor = 24u64.checked_sub(hours_passed).ok_or(ErrorCode::Overflow)?;
            let old_volume = self.volume.volume_24h;
            
            self.volume.volume_24h = self.volume.volume_24h
                .checked_mul(decay_factor)
                .ok_or(ErrorCode::Overflow)?
                .checked_div(24)
                .ok_or(ErrorCode::Overflow)?;
            
            self.volume.last_decay = current_time;

            emit!(VolumeDecayed {
                pool: self.key(),
                old_volume,
                new_volume: self.volume.volume_24h,
                hours_passed,
                ts: current_time as i64,
            });
        }
        Ok(())
    }

    pub fn reset_rate_limit(&mut self, current_time: u64) -> Result<()> {
        let old_count = self.rate_limit.count;
        self.rate_limit.count = 0;
        self.rate_limit.last_reset = current_time;

        emit!(RateLimitReset {
            pool: self.key(),
            old_count,
            new_count: 0,
            ts: current_time as i64,
        });

        Ok(())
    }

    pub fn pause_pool(&mut self, current_time: u64) -> Result<()> {
        require!(!self.is_paused, ErrorCode::PoolPaused);
        self.is_paused = true;
        self.last_update = current_time;

        emit!(PoolPaused {
            pool: self.key(),
            admin_pubkey: self.admin,
            ts: current_time as i64,
        });

        Ok(())
    }

    pub fn resume_pool(&mut self, current_time: u64) -> Result<()> {
        require!(self.is_paused, ErrorCode::PoolNotPaused);
        self.is_paused = false;
        self.last_update = current_time;

        emit!(PoolResumed {
            pool: self.key(),
            admin_pubkey: self.admin,
            ts: current_time as i64,
        });

        Ok(())
    }
}

#[derive(AnchorSerialize, AnchorDeserialize, Clone)]
pub struct TradeSettings {
    pub max_size_bps: u64,
    pub min_size: u64,
    pub cooldown_seconds: u64,
    pub last_trade_time: u64,
    pub early_trade_fee_bps: u64,
    pub early_trade_window_seconds: u64,
}

#[derive(AnchorSerialize, AnchorDeserialize, Clone)]
pub struct RateLimitSettings {
    pub window: u64,
    pub count: u32,
    pub max: u32,
    pub last_reset: u64,
}

#[derive(AnchorSerialize, AnchorDeserialize, Clone)]
pub struct CircuitBreakerSettings {
    pub threshold: u64,
    pub window: u64,
    pub cooldown: u64,
    pub last_trigger: u64,
}

#[derive(AnchorSerialize, AnchorDeserialize, Clone)]
pub struct VolumeSettings {
    pub volume_24h: u64,
    pub last_update: u64,
    pub last_decay: u64,
    pub max_daily: u64,
}

#[derive(AnchorSerialize, AnchorDeserialize, Clone)]
pub struct ProtectionSettings {
    pub snipe_protection_seconds: u64,
    pub max_price_impact_bps: u64,
}

/// Emitted when a new pool is initialized
#[event]
pub struct PoolInitialized {
    /// The pool's public key
    pub pool: Pubkey,
    /// The admin's public key
    pub admin_pubkey: Pubkey,
    /// Unix timestamp of initialization
    pub ts: i64,
}

/// Emitted when liquidity is added to the pool
#[event]
pub struct LiquidityAdded {
    /// The pool's public key
    pub pool: Pubkey,
    /// The admin's public key
    pub admin_pubkey: Pubkey,
    /// Amount of liquidity added
    pub amount: u64,
    /// Unix timestamp of addition
    pub ts: i64,
}

/// Emitted when liquidity is removed from the pool
#[event]
pub struct LiquidityRemoved {
    /// The pool's public key
    pub pool: Pubkey,
    /// The admin's public key
    pub admin_pubkey: Pubkey,
    /// Amount of liquidity removed
    pub amount: u64,
    /// Unix timestamp of removal
    pub ts: i64,
}

/// Emitted when a trade is executed
#[event]
pub struct TradeExecuted {
    /// The pool's public key
    pub pool: Pubkey,
    /// The buyer's public key
    pub buyer_pubkey: Pubkey,
    /// Amount of tokens input
    pub amount_in: u64,
    /// Amount of tokens output
    pub amount_out: u64,
    /// Fee amount charged
    pub fee_amount: u64,
    /// Fee mode applied (0=none, 1=early, 2=tier)
    pub fee_mode: u8,
    /// Unix timestamp of trade
    pub ts: i64,
    /// The token mint's public key
    pub token_mint: Pubkey,
}

/// Emitted when rate limit is reset
#[event]
pub struct RateLimitReset {
    /// The pool's public key
    pub pool: Pubkey,
    /// Previous rate limit count
    pub old_count: u32,
    /// New rate limit count
    pub new_count: u32,
    /// Unix timestamp of reset
    pub ts: i64,
}

/// Emitted when circuit breaker is triggered
#[event]
pub struct CircuitBreakerTriggered {
    /// The pool's public key
    pub pool: Pubkey,
    /// Current 24h volume
    pub volume_24h: u64,
    /// Circuit breaker threshold
    pub threshold: u64,
    /// Unix timestamp of trigger
    pub ts: i64,
}

/// Emitted when a trader is blacklisted
#[event]
pub struct TraderBlacklisted {
    /// The pool's public key
    pub pool: Pubkey,
    /// The trader's public key
    pub trader_pubkey: Pubkey,
    /// Unix timestamp of blacklist
    pub ts: i64,
}

/// Emitted when a trader is removed from blacklist
#[event]
pub struct TraderRemovedFromBlacklist {
    /// The pool's public key
    pub pool: Pubkey,
    /// The trader's public key
    pub trader_pubkey: Pubkey,
    /// Unix timestamp of removal
    pub ts: i64,
}

/// Emitted when batch blacklist operation completes
#[event]
pub struct BatchBlacklistCompleted {
    /// The pool's public key
    pub pool: Pubkey,
    /// The admin's public key
    pub admin_pubkey: Pubkey,
    /// Number of traders processed
    pub count: u64,
    /// Unix timestamp of completion
    pub ts: i64,
}

/// Emitted when fees are withdrawn
#[event]
pub struct FeesWithdrawn {
    /// The pool's public key
    pub pool: Pubkey,
    /// The admin's public key
    pub admin_pubkey: Pubkey,
    /// Amount of fees withdrawn
    pub amount: u64,
    /// Unix timestamp of withdrawal
    pub ts: i64,
}

/// Emitted when fee tiers are locked
#[event]
pub struct FeeTiersLocked {
    /// The pool's public key
    pub pool: Pubkey,
    /// The admin's public key
    pub admin_pubkey: Pubkey,
    /// Unix timestamp of locking
    pub ts: i64,
}

/// Emitted when fee tiers unlock is scheduled
#[event]
pub struct FeeTiersUnlockScheduled {
    /// The pool's public key
    pub pool: Pubkey,
    /// The admin's public key
    pub admin_pubkey: Pubkey,
    /// Scheduled unlock timestamp
    pub scheduled_time: i64,
}

/// Emitted when parameter update is scheduled
#[event]
pub struct ParameterUpdateScheduled {
    /// The pool's public key
    pub pool: Pubkey,
    /// The admin's public key
    pub admin_pubkey: Pubkey,
    /// Scheduled update timestamp
    pub scheduled_time: i64,
}

/// Emitted when parameter update is cancelled
#[event]
pub struct ParameterUpdateCancelled {
    /// The pool's public key
    pub pool: Pubkey,
    /// The admin's public key
    pub admin_pubkey: Pubkey,
    /// Unix timestamp of cancellation
    pub ts: i64,
}

/// Emitted when parameters are updated
#[event]
pub struct ParametersUpdated {
    /// The pool's public key
    pub pool: Pubkey,
    /// The admin's public key
    pub admin_pubkey: Pubkey,
    /// Unix timestamp of update
    pub ts: i64,
}

/// Emitted when emergency pause is scheduled
#[event]
pub struct EmergencyPauseScheduled {
    /// The pool's public key
    pub pool: Pubkey,
    /// The emergency admin's public key
    pub emergency_admin_pubkey: Pubkey,
    /// Scheduled pause timestamp
    pub scheduled_time: i64,
}

/// Emitted when emergency pause is applied
#[event]
pub struct EmergencyPaused {
    /// The pool's public key
    pub pool: Pubkey,
    /// The emergency admin's public key
    pub emergency_admin_pubkey: Pubkey,
    /// Unix timestamp of pause
    pub ts: i64,
}

/// Emitted when emergency resume is scheduled
#[event]
pub struct EmergencyResumeScheduled {
    /// The pool's public key
    pub pool: Pubkey,
    /// The emergency admin's public key
    pub emergency_admin_pubkey: Pubkey,
    /// Scheduled resume timestamp
    pub scheduled_time: i64,
}

/// Emitted when emergency resume is applied
#[event]
pub struct EmergencyResumed {
    /// The pool's public key
    pub pool: Pubkey,
    /// The emergency admin's public key
    pub emergency_admin_pubkey: Pubkey,
    /// Unix timestamp of resume
    pub ts: i64,
}

/// Emitted when circuit breaker is reset
#[event]
pub struct CircuitBreakerReset {
    /// The pool's public key
    pub pool: Pubkey,
    /// The admin's public key
    pub admin_pubkey: Pubkey,
    /// Unix timestamp of reset
    pub ts: i64,
}

/// Emitted when admin is updated
#[event]
pub struct AdminUpdated {
    /// The pool's public key
    pub pool: Pubkey,
    /// Previous admin's public key
    pub old_admin_pubkey: Pubkey,
    /// New admin's public key
    pub new_admin_pubkey: Pubkey,
    /// Unix timestamp of update
    pub ts: i64,
}

/// Emitted when an operation fails
#[event]
pub struct OperationFailed {
    /// The pool's public key
    pub pool: Pubkey,
    /// Name of the failed operation
    pub operation: String,
    /// Reason for failure
    pub reason: String,
    /// Unix timestamp of failure
    pub ts: i64,
}

/// Emitted when freeze authority is detected
#[event]
pub struct FreezeAuthorityWarning {
    /// The pool's public key
    pub pool: Pubkey,
    /// The token mint's public key
    pub token_mint: Pubkey,
    /// Unix timestamp of warning
    pub ts: i64,
}

/// Emitted when pool is paused
#[event]
pub struct PoolPaused {
    /// The pool's public key
    pub pool: Pubkey,
    /// The admin's public key
    pub admin_pubkey: Pubkey,
    /// Unix timestamp of pause
    pub ts: i64,
}

/// Emitted when pool is resumed
#[event]
pub struct PoolResumed {
    /// The pool's public key
    pub pool: Pubkey,
    /// The admin's public key
    pub admin_pubkey: Pubkey,
    /// Unix timestamp of resume
    pub ts: i64,
}

/// Emitted when volume decays
#[event]
pub struct VolumeDecayed {
    /// The pool's public key
    pub pool: Pubkey,
    /// Previous 24h volume
    pub old_volume: u64,
    /// New 24h volume
    pub new_volume: u64,
    /// Number of hours passed
    pub hours_passed: u64,
    /// Unix timestamp of decay
    pub ts: i64,
}

/// Emitted when price impact is rejected
#[event]
pub struct PriceImpactRejected {
    /// The pool's public key
    pub pool: Pubkey,
    /// Amount of tokens input
    pub amount_in: u64,
    /// Calculated price impact
    pub price_impact: u64,
    /// Maximum allowed price impact
    pub max_allowed: u64,
    /// Unix timestamp of rejection
    pub ts: i64,
}

#[error_code]
pub enum ErrorCode {
    #[msg("Unauthorized access: caller is not the admin or emergency admin")]
    Unauthorized,
    #[msg("Invalid token program: expected Token program")]
    InvalidTokenProgram,
    #[msg("Invalid amount: must be greater than zero")]
    InvalidAmount,
    #[msg("Pool has already started: cannot modify initial state")]
    PoolAlreadyStarted,
    #[msg("Pool is paused: trading is temporarily disabled")]
    PoolPaused,
    #[msg("Emergency pause active: trading is disabled due to emergency")]
    EmergencyPaused,
    #[msg("Invalid token account: owner or mint mismatch")]
    InvalidTokenAccount,
    #[msg("Token account is delegated: must be owner")]
    TokenAccountDelegated,
    #[msg("Invalid pool authority: PDA derivation failed")]
    InvalidPoolAuthority,
    #[msg("Invalid timestamp: must be non-negative")]
    InvalidTimestamp,
    #[msg("Balance validation failed: token transfer amounts mismatch")]
    InvalidBalance,
    #[msg("Insufficient pool balance: below minimum trade size")]
    InsufficientPoolBalance,
    #[msg("Insufficient liquidity: cannot withdraw more than available")]
    InsufficientLiquidity,
    #[msg("Snipe protection is active: trading not allowed in protection window")]
    SnipeProtectionActive,
    #[msg("Trader is blacklisted: trading not allowed")]
    TraderBlacklisted,
    #[msg("Trade size too small: below minimum threshold")]
    TradeTooSmall,
    #[msg("Rate limit exceeded: too many trades in window")]
    RateLimitExceeded,
    #[msg("Circuit breaker cooldown active: must wait before reset")]
    CircuitBreakerCooldown,
    #[msg("Daily volume limit exceeded: above maximum threshold")]
    DailyVolumeLimitExceeded,
    #[msg("Price impact too high: exceeds maximum allowed")]
    PriceImpactTooHigh,
    #[msg("Fee too low: below minimum threshold")]
    FeeTooLow,
    #[msg("Fee too high: above maximum threshold")]
    FeeTooHigh,
    #[msg("Slippage exceeded: price moved unfavorably")]
    SlippageExceeded,
    #[msg("Arithmetic overflow: calculation exceeds u64 bounds")]
    Overflow,
    #[msg("Invalid admin: must be current pool admin")]
    InvalidAdmin,
    #[msg("Trader already blacklisted: cannot add again")]
    TraderAlreadyBlacklisted,
    #[msg("Trader not blacklisted: cannot remove")]
    TraderNotBlacklisted,
    #[msg("No fees available to withdraw: balance is zero")]
    NoFeesAvailable,
    #[msg("Fee tiers already locked: cannot modify")]
    FeeTiersLocked,
    #[msg("Fee tiers not locked: must be locked first")]
    FeeTiersNotLocked,
    #[msg("Invalid fee tier configuration: check thresholds and fees")]
    InvalidFeeTier,
    #[msg("Too many fee tiers: exceeds maximum limit")]
    TooManyFeeTiers,
    #[msg("Duplicate fee tier threshold: must be unique")]
    DuplicateFeeTierThreshold,
    #[msg("Invalid fee tier spacing: below minimum required")]
    InvalidFeeTierSpacing,
    #[msg("No pending update available: must schedule first")]
    NoPendingUpdate,
    #[msg("Timelock not yet expired: must wait for delay")]
    TimelockNotExpired,
    #[msg("Invalid parameter relationship: check constraints")]
    InvalidParameterRelationship,
    #[msg("Invalid emergency admin: must be current emergency admin")]
    InvalidEmergencyAdmin,
    #[msg("Admin update too frequent: must wait for cooldown")]
    AdminUpdateTooFrequent,
    #[msg("Invalid new admin: cannot be current or emergency admin")]
    InvalidNewAdmin,
    #[msg("Too many traders in batch: exceeds maximum limit")]
    TooManyTraders,
    #[msg("Blacklist is full: cannot add more traders")]
    BlacklistFull,
    #[msg("Invalid rate limit: check window and max values")]
    InvalidRateLimit,
    #[msg("Token mint has freeze authority: must be revoked")]
    TokenMintHasFreezeAuthority,
    #[msg("Invalid token decimals: must be zero")]
    InvalidTokenDecimals,
    #[msg("Pool is already initialized: cannot initialize again")]
    PoolAlreadyInitialized,
    #[msg("Circuit breaker triggered: volume exceeds threshold")]
    CircuitBreakerTriggered,
    #[msg("Invalid freeze authority state: must be revoked")]
    InvalidFreezeAuthorityState,
    #[msg("Operation failed: check reason for details")]
    OperationFailed,
    #[msg("Invalid operation: not supported")]
    InvalidOperation,
    #[msg("Invalid reason: must be non-empty")]
    InvalidReason,
    #[msg("Invalid pool balance: must be positive")]
    InvalidPoolBalance,
    #[msg("Pool is finalized: no further changes allowed")]
    PoolFinalized,
    #[msg("Pool is not paused: cannot resume")]
    PoolNotPaused,
    #[msg("Account too large: exceeds Solana's maximum size")]
    AccountTooLarge,
}

// Helper function for fee calculation
fn apply_minimum_fee(fee: u64) -> Result<u64> {
    Ok(fee.max(MINIMUM_FEE))
}

// Helper macro for common validations
#[macro_export]
macro_rules! require_positive {
    ($amount:expr) => {
        require!($amount > 0, ErrorCode::InvalidAmount)
    };
}

// Helper function for PDA derivation
fn derive_pool_authority(pool_state: &Pubkey, program_id: &Pubkey) -> Result<(Pubkey, u8)> {
    Pubkey::find_program_address(
        &[b"pool_authority", pool_state.as_ref()],
        program_id,
    ).ok_or(ErrorCode::InvalidPoolAuthority)
}

mod utils {
    use super::*;

    // Helper macro for admin validation
    #[macro_export]
    macro_rules! require_admin {
        ($ctx:expr, $pool_state:expr) => {
            require!(
                $ctx.accounts.admin.key() == $pool_state.admin,
                ErrorCode::InvalidAdmin
            )
        };
    }

    // Helper macro for emergency admin validation
    #[macro_export]
    macro_rules! require_emergency_admin {
        ($ctx:expr, $pool_state:expr) => {
            require!(
                $ctx.accounts.emergency_admin.key() == $pool_state.emergency_admin,
                ErrorCode::InvalidEmergencyAdmin
            )
        };
    }

    // Helper macro for pool state validation
    #[macro_export]
    macro_rules! require_pool_active {
        ($pool_state:expr) => {
            require!(!$pool_state.is_paused, ErrorCode::PoolPaused);
            require!(!$pool_state.is_emergency_paused, ErrorCode::EmergencyPaused);
            require!(!$pool_state.is_finalized, ErrorCode::PoolFinalized);
        };
    }

    pub fn calculate_fee(pool_state: &PoolState, amount_in: u64, current_time: i64) -> Result<(u64, u8)> {
        // Early trade fee if within protection window
        if current_time - pool_state.pool_start_time as i64 <= pool_state.trade_settings.early_trade_window_seconds as i64 {
            let fee = amount_in
                .checked_mul(pool_state.trade_settings.early_trade_fee_bps)
                .ok_or(ErrorCode::Overflow)?
                .checked_div(10000)
                .ok_or(ErrorCode::Overflow)?;
            
            // Use default fee if configured, otherwise minimum fee
            let effective_fee = if fee == 0 {
                pool_state.default_fee_bps
                    .map(|bps| amount_in.checked_mul(bps).ok_or(ErrorCode::Overflow)?.checked_div(10000).ok_or(ErrorCode::Overflow)?)
                    .unwrap_or(MINIMUM_FEE)
            } else {
                fee.max(MINIMUM_FEE)
            };
            
            return Ok((effective_fee, FEE_MODE_EARLY_TRADE));
        }

        // Find applicable fee tier based on volume
        for tier in &pool_state.fee_tiers {
            if pool_state.volume.volume_24h <= tier.volume_threshold {
                let fee = amount_in
                    .checked_mul(tier.fee_bps)
                    .ok_or(ErrorCode::Overflow)?
                    .checked_div(10000)
                    .ok_or(ErrorCode::Overflow)?;
                
                // Use default fee if configured, otherwise minimum fee
                let effective_fee = if fee == 0 {
                    pool_state.default_fee_bps
                        .map(|bps| amount_in.checked_mul(bps).ok_or(ErrorCode::Overflow)?.checked_div(10000).ok_or(ErrorCode::Overflow)?)
                        .unwrap_or(MINIMUM_FEE)
                } else {
                    fee.max(MINIMUM_FEE)
                };
                
                return Ok((effective_fee, FEE_MODE_TIER_BASED));
            }
        }

        // Use default fee if configured, otherwise minimum fee
        let fallback_fee = pool_state.default_fee_bps
            .map(|bps| amount_in.checked_mul(bps).ok_or(ErrorCode::Overflow)?.checked_div(10000).ok_or(ErrorCode::Overflow)?)
            .unwrap_or(MINIMUM_FEE);

        Ok((fallback_fee, FEE_MODE_NONE))
    }

    pub fn calculate_price_impact(amount_in: u64, pool_balance: u64) -> Result<u64> {
        require!(pool_balance > 0, ErrorCode::InvalidPoolBalance);
        amount_in
            .checked_mul(10000)
            .ok_or(ErrorCode::Overflow)?
            .checked_div(pool_balance)
            .ok_or(ErrorCode::Overflow)
    }

    pub fn derive_pool_authority(pool_state: &Pubkey, program_id: &Pubkey) -> Result<(Pubkey, u8)> {
        Pubkey::find_program_address(
            &[b"pool_authority", pool_state.as_ref()],
            program_id,
        ).ok_or(ErrorCode::InvalidPoolAuthority)
    }

    pub fn validate_trader(trader: &Pubkey, pool_state: &PoolState) -> Result<()> {
        require!(*trader != Pubkey::default(), ErrorCode::InvalidTrader);
        require!(*trader != pool_state.admin, ErrorCode::InvalidTrader);
        require!(*trader != pool_state.emergency_admin, ErrorCode::InvalidTrader);
        Ok(())
    }

    pub fn simulate_trade(
        pool_state: &PoolState,
        amount_in: u64,
        current_time: i64,
    ) -> Result<TradeSimulation> {
        let (fee_amount, fee_mode) = calculate_fee(pool_state, amount_in, current_time)?;
        let amount_out = amount_in.checked_sub(fee_amount).ok_or(ErrorCode::Overflow)?;
        let price_impact = calculate_price_impact(amount_in, pool_state.total_liquidity)?;

        Ok(TradeSimulation {
            amount_in,
            amount_out,
            fee_amount,
            fee_mode,
            price_impact,
        })
    }

    pub fn estimate_slippage(
        pool_state: &PoolState,
        amount_in: u64,
        slippage_bps: u64,
    ) -> Result<SlippageEstimate> {
        let current_time = Clock::get()?.unix_timestamp as i64;
        let simulation = simulate_trade(pool_state, amount_in, current_time)?;
        
        let min_amount_out = simulation.amount_out
            .checked_mul(10000 - slippage_bps)
            .ok_or(ErrorCode::Overflow)?
            .checked_div(10000)
            .ok_or(ErrorCode::Overflow)?;

        Ok(SlippageEstimate {
            expected_amount_out: simulation.amount_out,
            min_amount_out,
            price_impact: simulation.price_impact,
            fee_amount: simulation.fee_amount,
        })
    }

    pub fn process_blacklist_operations(
        pool_state: &mut PoolState,
        traders: Vec<Pubkey>,
        operation: BlacklistOperation,
        current_time: u64,
    ) -> Result<()> {
        // Validate input size
        if traders.is_empty() {
            return Err(ErrorCode::InvalidOperation.into());
        }
        if traders.len() > 100 {
            return Err(ErrorCode::TooManyTraders.into());
        }

        // Convert to HashSet for O(1) lookups
        let mut blacklist_set: std::collections::HashSet<Pubkey> = 
            pool_state.trader_blacklist.iter().cloned().collect();

        match operation {
            BlacklistOperation::Add => {
                // Deduplicate traders
                let unique_traders: Vec<Pubkey> = traders.into_iter()
                    .filter(|trader| !blacklist_set.contains(trader))
                    .collect();

                // Check if adding would exceed blacklist size
                if blacklist_set.len() + unique_traders.len() > 1000 {
                    return Err(ErrorCode::BlacklistFull.into());
                }

                // Add traders and emit events
                for trader in &unique_traders {
                    blacklist_set.insert(*trader);
                    emit!(TraderBlacklisted {
                        pool: pool_state.key(),
                        trader_pubkey: *trader,
                        ts: current_time as i64,
                    });
                }

                // Update pool state
                pool_state.trader_blacklist = blacklist_set.into_iter().collect();
                pool_state.trader_blacklist.sort(); // Keep sorted for consistency

                emit!(BatchBlacklistCompleted {
                    pool: pool_state.key(),
                    admin_pubkey: pool_state.admin,
                    count: unique_traders.len() as u64,
                    ts: current_time as i64,
                });
            }
            BlacklistOperation::Remove => {
                let mut removed_count = 0;
                for trader in &traders {
                    if blacklist_set.remove(trader) {
                        removed_count += 1;
                        emit!(TraderRemovedFromBlacklist {
                            pool: pool_state.key(),
                            trader_pubkey: *trader,
                            ts: current_time as i64,
                        });
                    }
                }

                // Update pool state
                pool_state.trader_blacklist = blacklist_set.into_iter().collect();
                pool_state.trader_blacklist.sort(); // Keep sorted for consistency

                emit!(BatchBlacklistCompleted {
                    pool: pool_state.key(),
                    admin_pubkey: pool_state.admin,
                    count: removed_count,
                    ts: current_time as i64,
                });
            }
        }

        Ok(())
    }
}

// Add new struct for trade simulation
#[derive(AnchorSerialize, AnchorDeserialize, Clone)]
pub struct TradeSimulation {
    pub amount_in: u64,
    pub amount_out: u64,
    pub fee_amount: u64,
    pub fee_mode: u8,
    pub price_impact: u64,
}

// Add new event for rate limit resets
#[event]
pub struct RateLimitReset {
    pub pool: Pubkey,
    pub old_count: u32,
    pub new_count: u32,
    pub ts: i64,
}

// Add new event for price impact rejections
#[event]
pub struct PriceImpactRejected {
    pub pool: Pubkey,
    pub amount_in: u64,
    pub price_impact: u64,
    pub max_allowed: u64,
    pub ts: i64,
}

// Add new instruction for trade simulation
pub fn simulate_trade_execution(
    ctx: Context<contexts::SimulateTrade>,
    amount_in: u64,
) -> Result<TradeSimulation> {
    let pool_state = &ctx.accounts.pool_state;
    let current_time = Clock::get()?.unix_timestamp as i64;
    
    utils::simulate_trade(pool_state, amount_in, current_time)
}

// Add new account struct for simulation
#[derive(Accounts)]
pub struct SimulateTrade<'info> {
    pub pool_state: Account<'info, PoolState>,
}

// Add enum for blacklist operations
#[derive(AnchorSerialize, AnchorDeserialize, Clone)]
pub enum BlacklistOperation {
    Add,
    Remove,
}

// Add new structs for view functions
#[derive(AnchorSerialize, AnchorDeserialize, Clone)]
pub struct SlippageEstimate {
    pub expected_amount_out: u64,
    pub min_amount_out: u64,
    pub price_impact: u64,
    pub fee_amount: u64,
}

// Add new view functions
pub fn estimate_trade_slippage(
    ctx: Context<contexts::SimulateTrade>,
    amount_in: u64,
    slippage_bps: u64,
) -> Result<SlippageEstimate> {
    let pool_state = &ctx.accounts.pool_state;
    utils::estimate_slippage(pool_state, amount_in, slippage_bps)
}

#[macro_export]
macro_rules! validate_condition {
    ($condition:expr, $error:expr) => {
        if !$condition {
            return Err($error.into());
        }
    };
}

#[macro_export]
macro_rules! validate_parameter {
    ($value:expr, $min:expr, $max:expr, $error:expr) => {
        validate_condition!($value >= $min && $value <= $max, $error);
    };
}

mod validation {
    use super::*;

    pub fn validate_trade_parameters(
        pool_state: &PoolState,
        amount_in: u64,
        current_time: u64,
    ) -> Result<()> {
        // Check if pool is paused
        validate_condition!(!pool_state.is_paused, ErrorCode::PoolPaused);
        validate_condition!(!pool_state.is_emergency_paused, ErrorCode::EmergencyPaused);

        // Validate trade size
        let max_trade_size = (pool_state.total_liquidity * pool_state.trade_settings.max_size_bps) / 10000;
        validate_condition!(
            amount_in >= pool_state.trade_settings.min_size && amount_in <= max_trade_size,
            ErrorCode::TradeTooSmall
        );

        // Check cooldown
        validate_condition!(
            current_time >= pool_state.trade_settings.last_trade_time + pool_state.trade_settings.cooldown_seconds,
            ErrorCode::RateLimitExceeded
        );

        // Check rate limit
        if current_time >= pool_state.rate_limit.last_reset + pool_state.rate_limit.window {
            pool_state.reset_rate_limit(current_time)?;
        }
        validate_condition!(
            pool_state.rate_limit.count < pool_state.rate_limit.max,
            ErrorCode::RateLimitExceeded
        );

        // Check circuit breaker
        validate_condition!(
            pool_state.volume.volume_24h <= pool_state.circuit_breaker.threshold,
            ErrorCode::CircuitBreakerTriggered
        );

        // Check daily volume
        validate_condition!(
            pool_state.volume.volume_24h + amount_in <= pool_state.volume.max_daily,
            ErrorCode::DailyVolumeLimitExceeded
        );

        // Check price impact
        let price_impact = utils::calculate_price_impact(amount_in, pool_state.total_liquidity)?;
        validate_condition!(
            price_impact <= pool_state.protection.max_price_impact_bps,
            ErrorCode::PriceImpactTooHigh
        );

        Ok(())
    }

    pub fn validate_fee_parameters(
        pool_state: &PoolState,
        fee_tiers: &[FeeTier],
    ) -> Result<()> {
        // Check if fee tiers are locked
        validate_condition!(!pool_state.fee_tiers_locked, ErrorCode::FeeTiersLocked);

        // Validate fee tiers
        validate_condition!(!fee_tiers.is_empty(), ErrorCode::InvalidFeeTier);
        validate_condition!(fee_tiers.len() <= 100, ErrorCode::TooManyFeeTiers);

        // Check for duplicates and validate thresholds
        let mut prev_threshold = 0;
        for tier in fee_tiers {
            validate_parameter!(tier.threshold, prev_threshold + 1, u64::MAX, ErrorCode::InvalidFeeTierSpacing);
            validate_parameter!(tier.fee_bps, 0, 10000, ErrorCode::FeeTooHigh);
            prev_threshold = tier.threshold;
        }

        Ok(())
    }

    pub fn validate_admin_action(
        pool_state: &PoolState,
        admin: &Pubkey,
        current_time: u64,
    ) -> Result<()> {
        validate_condition!(admin == &pool_state.admin, ErrorCode::Unauthorized);
        validate_condition!(!pool_state.is_finalized, ErrorCode::PoolFinalized);
        validate_condition!(
            current_time >= pool_state.last_admin_update + 86400,
            ErrorCode::AdminUpdateTooFrequent
        );
        Ok(())
    }
}

// Update execute_trade to use the new validation
pub fn execute_trade(
    ctx: Context<contexts::ExecuteTrade>,
    amount_in: u64,
    minimum_amount_out: u64,
) -> Result<()> {
    let pool_state = &mut ctx.accounts.pool_state;
    let current_time = Clock::get()?.unix_timestamp as u64;

    // Validate trade parameters
    validation::validate_trade_parameters(pool_state, amount_in, current_time)?;

    // Calculate fee and execute trade
    let (fee_amount, fee_mode) = utils::calculate_fee(pool_state, amount_in, current_time as i64)?;
    let amount_after_fee = amount_in.checked_sub(fee_amount)
        .ok_or(ErrorCode::Overflow)?;

    // Execute the trade
    let amount_out = execute_token_transfer(
        ctx.accounts.into(),
        amount_after_fee,
        minimum_amount_out,
    )?;

    // Update pool state
    pool_state.total_fees_collected = pool_state.total_fees_collected
        .checked_add(fee_amount)
        .ok_or(ErrorCode::Overflow)?;
    pool_state.trade_settings.last_trade_time = current_time;
    pool_state.rate_limit.count = pool_state.rate_limit.count
        .checked_add(1)
        .ok_or(ErrorCode::Overflow)?;
    pool_state.volume.volume_24h = pool_state.volume.volume_24h
        .checked_add(amount_in)
        .ok_or(ErrorCode::Overflow)?;

    emit!(TradeExecuted {
        pool: pool_state.key(),
        buyer_pubkey: ctx.accounts.buyer.key(),
        amount_in,
        amount_out,
        fee_amount,
        fee_mode,
        ts: current_time as i64,
        token_mint: pool_state.token_mint,
    });

    Ok(())
}